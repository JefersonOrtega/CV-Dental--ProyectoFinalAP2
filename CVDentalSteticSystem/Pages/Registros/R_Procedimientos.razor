@page "/Procedimientos"

@using Models
@using CVDentalSteticSystem.BLL

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!EsAutorizado)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
  && EsAutorizado)
{
    <EditForm Model="Procedimiento" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h3>Registro de Procedimientos</h3>
            </div>

            <div class="card-body">
                <form>
                    @*ProcedimientoId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Procedimiento Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Procedimiento.ProcedimientoId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*PacienteId*@
                    <div class="form-group">
                        <label>Paciente Id</label>
                        <InputSelectNumber @bind-Value="Procedimiento.PacienteId" class="form-control">
                            <option value="" disabled selected>Seleccione un Paciente</option>
                            @foreach (var auxiliar in CargarPacientes())
                                {
                                <option value="@auxiliar.PacienteId">@auxiliar.Nombres"+"@auxiliar.Apellidos</option>
                                }
                        </InputSelectNumber>
                        <ValidationMessage For="@(()=>Procedimiento.PacienteId)" />

                    </div>

                    @*TipoProcedimientoId*@
                    <div class="form-group">
                        <label>Tipo de Procedimiento Id</label>
                        <InputSelectNumber @bind-Value="Procedimiento.TipoProcedimientoId" class="form-control">
                            <option value="" disabled selected>Seleccione una tipo de procedimiento</option>
                            @foreach (var auxiliar in CargarTiposProcedimientos())
                                {
                                <option value="@auxiliar.TipoProcedimientoId">@auxiliar.NombreProcedimiento</option>
                                }
                        </InputSelectNumber>
                        <ValidationMessage For="@(()=>Procedimiento.PacienteId)" />

                    </div>

                </form>

            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: in line-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int ProcedimientoId { get; set; }

    private Procedimientos Procedimiento = new Procedimientos();
    public bool EsAutorizado = false;

    protected override void OnInitialized()
    {
        Nuevo();

        Buscar();

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador") ||
            AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Odontologo/a"))
        {
            EsAutorizado = true;
        }
    }

    public void Nuevo()
    {
        Procedimiento = new Procedimientos();
    }

    private void Buscar()
    {
        if (Procedimiento.ProcedimientoId > 0)
        {
            var encontrado = ProcedimientosBLL.Buscar(Procedimiento.ProcedimientoId);

            if (encontrado != null)
                this.Procedimiento = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public List<Pacientes> CargarPacientes()
    {
        List<Pacientes> lista = new List<Pacientes>();

        try
        {
            lista = PacientesBLL.GetPacientes();
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    public List<TiposProcedimientos> CargarTiposProcedimientos()
    {
        List<TiposProcedimientos> lista = new List<TiposProcedimientos>();

        try
        {
            lista = TipoProcedimientoBLL.GetTiposProcedimientos();
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    public void Guardar()
    {
        bool guardo;
        guardo = ProcedimientosBLL.Guardar(Procedimiento);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado Correctamente");
        }
        else
        {
            toast.ShowError("No fue Posible Guardar");
        }
    }

    public void Eliminar()
    {
        bool elimino;
        elimino = ProcedimientosBLL.Eliminar(Procedimiento.ProcedimientoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

}
