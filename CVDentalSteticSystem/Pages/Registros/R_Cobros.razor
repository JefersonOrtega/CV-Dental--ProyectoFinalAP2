@page "/Cobros"
@page "/Cobros/{CobroId:int}"


@using CVDentalSteticSystem.BLL

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>

    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!EsAutorizado)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& EsAutorizado)
{
    <EditForm Model="Cobro" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <h3>Registro de Cobros</h3>
            </div>

            <div class="card-body">
                <form>
                    @*CobroId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Cobro Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Cobro.CobroId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*PacienteId*@
                    <div class="form-group">
                        <label>Paciente</label>
                        <InputSelectNumber @bind-Value="Cobro.PacienteId" class="form-control">
                            <option value="" disabled selected>Seleccione un Paciente</option>
                            @foreach (var auxiliar in CargarPacientes())
                                {
                                <option value="@auxiliar.PacienteId">@auxiliar.Nombres @auxiliar.Apellidos</option>
                                }
                        </InputSelectNumber>
                        <ValidationMessage For="@(() => Cobro.PacienteId)" />
                    </div>

                    @*TipoProcedimientoId*@
                    <div class="form-group">
                        <label>Tipo de Procedimiento Id</label>
                        <InputSelectNumber @bind-Value="Cobro.ProcedimientoId" class="form-control">
                            <option value="" disabled selected>Seleccione una tipo de procedimiento</option>
                            @foreach (var auxiliar in CargarTiposProcedimientos())
                                {
                                <option value="@auxiliar.TipoProcedimientoId">@auxiliar.NombreProcedimiento</option>
                                }
                        </InputSelectNumber>
                        <ValidationMessage For="@(()=>Cobro.ProcedimientoId)" />
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <SfDateTimePicker TValue="DateTime" @bind-Value="Cobro.Fecha" Placeholder='Select a date and time' />
                        <ValidationMessage For="@(() => Cobro.Fecha)" />
                    </div>

                    @*Monto*@
                    <div class="form-group">
                        <label>Monto</label>
                        <InputNumber @bind-Value="Cobro.Monto" class="form-control" />
                        <ValidationMessage For="@(() => Cobro.Monto)"/>
                    </div>

                    @*ProcedimientosDetalle*@
                    <div class="card">
                        <div class="card-body">
                            <div class="form-row">
                
                                @*Descripción*@
                                <div class="form-group ">
                                    <label>Descripción</label>
                                    <div class="input-group">
                                        <InputText @bind-Value="Descripcion" class="form-control" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary" @onclick="AgregarDetalle">
                                                <i class="oi oi-plus" aria-hidden="true" /> Agregar
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <table class="table">
                                <thead class="thead-light">
                                    <tr>
                                        <th scope="col">CobroId</th>
                                        <th scope="col">Paciente</th>
                                        <th scope="col">Descripción</th>
                                        <th scope="col">Monto</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Cobro.CobroDetalles)
                                    {
                                        <tr>

                                            <td>1</td>
                                            <td>@paciente.Nombres  @paciente.Apellidos</td>
                                            <td>@item.Descripcion</td>
                                            <td>@Cobro.Monto</td>
                                            <td>
                                                <button type="button" class="btn btn-danger" @onclick="@(() => EliminarDetalle(item))">
                                                    <span class="oi oi-x col"></span>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    @*Monto
                    <div class="form-group">
                        <label>Monto</label>
                        <InputNumber readOnly @bind-Value="(() => CargarPacientes().Where(p => p.PacienteId == Cobro.PacienteId).Select(p => p.Balance)
                                                           .FirstOrDefault())" class="form-control" />
                    </div>*@
                </form>

            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: in line-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int CobroId { get; set; }
    private Cobros Cobro = new Cobros();

    public bool EsAutorizado = false;
    private string Descripcion = "";

    Pacientes paciente = new Pacientes();

    public void BuscarPaciente()
    {
        paciente = PacientesBLL.Buscar(Cobro.PacienteId);
    }

    protected override void OnInitialized()
    {
        Nuevo();

        Buscar();

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador") ||
            AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Odontologo/a"))
        {
            EsAutorizado = true;
        }
    }

    public void Nuevo()
    {
        Cobro = new Cobros();
    }

    private void Buscar()
    {
        if (Cobro.CobroId > 0)
        {
            var encontrado = CobrosBLL.Buscar(Cobro.CobroId);

            if (encontrado != null)
            {
                this.Cobro = encontrado;
                //BuscarPaciente();
            }
            else
            {
                toast.ShowWarning("No encontrado");
            }

        }
    }

    public List<Pacientes> CargarPacientes()
    {
        List<Pacientes> lista = new List<Pacientes>();

        try
        {
            lista = PacientesBLL.GetPacientes();
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    public List<TiposProcedimientos> CargarTiposProcedimientos()
    {
        List<TiposProcedimientos> lista = new List<TiposProcedimientos>();

        try
        {
            lista = TiposProcedimientosBLL.GetTiposProcedimientos();
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private void AgregarDetalle()
    {

        if (Descripcion != "")
        {
            Cobro.CobroDetalles.Add(new CobroDetalles
            {
                Descripcion = this.Descripcion
            });
        }
        else
        {
            toast.ShowWarning("Es Necesario introducir una descripción");
        }

        BuscarPaciente();

    }

    public void EliminarDetalle(CobroDetalles detalle)
    {
        Cobro.CobroDetalles.Remove(detalle);
    }

    public void Guardar()
    {
        bool guardo;
        CobrosBLL.PagarMonto(Cobro.PacienteId, Cobro.Monto);
        guardo = CobrosBLL.Guardar(Cobro);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado Correctamente");
        }
        else
        {
            toast.ShowError("No fue Posible Guardar");
        }
    }

    public void Eliminar()
    {
        bool elimino;
        elimino = ProcedimientosBLL.Eliminar(Cobro.CobroId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

}
