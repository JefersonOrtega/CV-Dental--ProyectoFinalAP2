@page "/ConsultaCobros"

@using CVDentalSteticSystem.BLL
@using CVDentalSteticSystem.Pages.ReportesComponents
@using CVDentalSteticSystem.Pages.Reportes

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService modal
@inject IToastService toast

<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>
    </NotAuthorized>

    <Authorized>
        @if (!EsAutorizado)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& EsAutorizado)
{
    <div class="card">
        <div class="card-header">
            <h3>Consulta de Cobros</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="form-group col-4">
                    <label>Filtro: </label>
                    <select @bind="eleccion" class="form-control  col-4" placeholder="Seleccione un Filtro">
                        <option value="0">Id</option>
                        <option value="1">PacienteId</option>
                        <option value="2">ProcedimientoId</option>
                        <option value="3">Fecha</option>
                    </select>
                </div>

                <div class="form-group   col-6">
                    <label>Criterio</label>
                    <div class="input-group">
                        <input type="text" @bind=" criterio" class="form-control" />
                        <div class="input-group-append">
                            <button class="btn btn-primary" @onclick="@(c => Consultar(0))">Consultar</button>
                        </div>
                    </div>
                </div>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>CobroId</th>
                        <th>PacienteId</th>
                        <th>ProcedimientoId</th>
                        <th>Monto</th>
                        <th>Fecha</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in listaItems)
                    {
                        <tr>
                            <td>@item.CobroId</td>
                            <td>@item.PacienteId</td>
                            <td>@item.ProcedimientoId</td>
                            <td>@item.Monto</td>
                            <td>@item.Fecha</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">

                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Primero"))" tabindex="-1"> @("<<") </button>
                        </li>
                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Anterior"))" tabindex="-1"> @("<") </button>
                        </li>


                        @for (int i = 0; i < TotalPaginas; i++)
                        {
                            var numeroPagina = i;
                            <li class="page-item">
                                <button class="@(PaginaActual == numeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                        @onclick="@(c => Consultar(numeroPagina))">
                                    @(i + 1)
                                </button>
                            </li>
                        }

                        <li class="page-item">
                            <button type="button" class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Siguiente"))" tabindex="-1">@(">")</button>

                        </li>
                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Ultimo"))" tabindex="-1"> @(">>") </button>
                        </li>

                    </ul>
                </nav>
            </div>
        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-lg btn-warning" @onclick="GenerarReporte"> <i class="oi oi-print" aria-hidden="true" /> Imprimir</button>
        </div>
    </div>
}

@code {
    List<Cobros> lista = new List<Cobros>();
    List<Cobros> listaItems = new List<Cobros>();
    List<Pacientes> listaPacientes = new List<Pacientes>();
    private string eleccion;
    private string criterio;
    public bool EsAutorizado = false;

    public int PageSize { get; set; }
    public int TotalPaginas { get; set; }
    public int PaginaActual { get; set; }

    protected override void OnInitialized()
    {
        lista = CobrosBLL.GetList(x => true);
        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
        {
            EsAutorizado = true;
        }

        PageSize = 5;
        TotalPaginas = (int)Math.Ceiling(lista.Count() / (decimal)PageSize);
        listaItems = lista.Take(PageSize).ToList();
    }

    private void ActualizarListaItems(int numeroPagina)
    {
        listaItems = lista.Skip(numeroPagina * PageSize).Take(PageSize).ToList();
        TotalPaginas = (int)Math.Ceiling(lista.Count() / (decimal)PageSize);
        PaginaActual = numeroPagina;

    }

    private void NavegateTo(string direccion)
    {
        if (direccion == "Anterior" && PaginaActual != 0)
            PaginaActual -= 1;
        if (direccion == "Siguiente" && PaginaActual != TotalPaginas)
            PaginaActual += 1;

        if (direccion == "Primero" && PaginaActual != 0)
            PaginaActual = 0;
        if (direccion == "Ultimo" && PaginaActual != TotalPaginas)
            PaginaActual = TotalPaginas - 1;

        ActualizarListaItems(PaginaActual);
    }


    private void Consultar(int numeroPagina)
    {
        int seleccion = Convert.ToInt32(eleccion);

        if (criterio.Trim().Length > 0)
        {
            switch (seleccion)
            {
                case 0: //id
                    {
                        int id = int.Parse(criterio);
                        lista = CobrosBLL.GetList(c => c.CobroId == id);
                        ActualizarListaItems(numeroPagina);
                        break;

                    }
                case 1: //Nombres
                    {
                        //lista = CobrosBLL.GetList(c => c.PacienteId == listaPacientes.Select(p => p.Nombres.Equals(c.PacienteId)).FirstOrDefault());
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 2: //Nombre de Usuario
                    {
                        //lista = CobrosBLL.GetList(p => p.Fecha == criterio);
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 3: //Nivel de Acceso
                    {
                        //lista = CobrosBLL.GetList(p => p.Monto);
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
            }
        }
        else
        {
            lista = CobrosBLL.GetList(x => true);
            ActualizarListaItems(numeroPagina);
        }
    }


    public void GenerarReporte()
    {

        if (lista.Count > 0)
        {
            var parameters = new ModalParameters();
            parameters.Add("Lista", lista);

            modal.Show<VerPacientesReport>("Reporte de pacientes", parameters);
        }
        else
        {
            toast.ShowWarning("No hay datos para imprimir");
        }
    }

}