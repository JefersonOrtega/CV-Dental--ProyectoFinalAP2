@page "/ConsultaProcedimientos"

@using CVDentalSteticSystem.BLL
@using CVDentalSteticSystem.Pages.ReportesComponents
@using CVDentalSteticSystem.Pages.Reportes

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService modal
@inject IToastService toast
<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!EsAutorizado)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& EsAutorizado)
{
    <div class="card">
        <div class="card-header">
            <h3>Consulta de Procedimientos</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="form-group col-4">
                    <label>Filtro: </label>
                    <select @bind="eleccion" class="form-control  col-4" placeholder="Seleccione un Filtro">
                        <option value="0">Id</option>
                        <option value="1">Paciente</option>
                        <option value="2">Tipo de Procedimiento</option>
                        <option value="3">En Proceso</option>
                        <option value="4">Concluidos</option>
                        <option value="5">Cobrados</option>
                        <option value="6">No Cobrados</option>

                    </select>
                </div>

                <div class="form-group   col-6">
                    <label>Criterio</label>
                    <div class="input-group">



                        @if (eleccion == "2")
                        {
                            <select @bind="PacienteSelecionado.PacienteId" class="form-control">
                                <option value="" disabled selected>Seleccione un Paciente</option>
                                @foreach (var auxiliar in CargarPacientes())
                                {
                                    <option value="@auxiliar.PacienteId">@auxiliar.Nombres @auxiliar.Apellidos</option>
                                }
                            </select>
                        }
                        else
                        {
                            @if (eleccion == "3")
                            {
                                <select @bind="TipoProcedimientoSeleccionado" class="form-control">
                                    <option value="" disabled selected>Seleccione una tipo de procedimiento</option>
                                    @foreach (var auxiliar in CargarTiposProcedimientos())
                                    {
                                        <option value="@auxiliar.TipoProcedimientoId">@auxiliar.NombreProcedimiento</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <input type="text" @bind="criterio" class="form-control" />
                            }

                        }






                        <div class="input-group-append">
                            <button class="btn btn-primary" @onclick="@(c => Consultar(0))">Consultar</button>
                        </div>
                    </div>
                </div>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Procedimiento Id</th>
                        <th>Paciente</th>
                        <th>Tipo de Procedimiento</th>
                        <th>Estado</th>
                        <th>Monto</th>
                        <th>Es Cobrado</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in listaItems)
                    {
                        <tr>
                            <td>@item.ProcedimientoId</td>
                            <td>@Paciente(item.PacienteId)</td>
                            <td>@BuscarTipoProcedimiento(item.TipoProcedimientoId).NombreProcedimiento</td>
                            <td>@item.Estado</td>
                            <td>@item.Monto</td>
                            <td>@item.EsCobrado</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
        <div class="card-footer">
            <div class="form-group">
                <label>Total Sin Cobrar</label>
                <input type="text" readonly @bind="TotalSinCobrar" class="form-control" />
            </div>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">

                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Primero"))" tabindex="-1"> @("<<") </button>
                        </li>
                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Anterior"))" tabindex="-1"> @("<") </button>
                        </li>


                        @for (int i = 0; i < TotalPaginas; i++)
                        {
                            var numeroPagina = i;
                            <li class="page-item">
                                <button class="@(PaginaActual == numeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                        @onclick="@(c => Consultar(numeroPagina))">
                                    @(i + 1)
                                </button>
                            </li>
                        }

                        <li class="page-item">
                            <button type="button" class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Siguiente"))" tabindex="-1">@(">")</button>

                        </li>
                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Ultimo"))" tabindex="-1"> @(">>") </button>
                        </li>

                    </ul>
                </nav>
            </div>
        </div>

        <div class="card-footer">
            <button type="button" class="btn btn-lg btn-warning" @onclick="GenerarReporte"> <i class="oi oi-print" aria-hidden="true" /> Imprimir</button>
        </div>

    </div>
}

@code {

    List<Procedimientos> listaProcedimientos = new List<Procedimientos>();
    List<Procedimientos> listaItems = new List<Procedimientos>();
    private string eleccion;
    private string criterio = "";
    public bool EsAutorizado = false;
    public decimal TotalSinCobrar = 0;
    public Pacientes PacienteSelecionado = new Pacientes();
    public int TipoProcedimientoSeleccionado;


    public int PageSize { get; set; }
    public int TotalPaginas { get; set; }
    public int PaginaActual { get; set; }



    protected override void OnInitialized()
    {
        listaProcedimientos = ProcedimientosBLL.GetList(x => true);
        ObtenerTotalSinCobrar(listaProcedimientos);

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador") ||
            AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Normal"))
        {
            EsAutorizado = true;
        }

        PageSize = 5;
        TotalPaginas = (int)Math.Ceiling(listaProcedimientos.Count() / (decimal)PageSize);
        listaItems = listaProcedimientos.Take(PageSize).ToList();
    }

    private void ActualizarListaItems(int numeroPagina)
    {
        listaItems = listaProcedimientos.Skip(numeroPagina * PageSize).Take(PageSize).ToList();
        TotalPaginas = (int)Math.Ceiling(listaProcedimientos.Count() / (decimal)PageSize);
        PaginaActual = numeroPagina;

        ObtenerTotalSinCobrar(listaProcedimientos);

    }

    private void NavegateTo(string direccion)
    {
        if (direccion == "Anterior" && PaginaActual != 0)
            PaginaActual -= 1;
        if (direccion == "Siguiente" && PaginaActual != TotalPaginas)
            PaginaActual += 1;

        if (direccion == "Primero" && PaginaActual != 0)
            PaginaActual = 0;
        if (direccion == "Ultimo" && PaginaActual != TotalPaginas)
            PaginaActual = TotalPaginas - 1;

        ActualizarListaItems(PaginaActual);
    }


    public List<Pacientes> CargarPacientes()
    {
        List<Pacientes> lista = new List<Pacientes>();

        try
        {
            lista = PacientesBLL.GetPacientes();
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    public List<TiposProcedimientos> CargarTiposProcedimientos()
    {
        List<TiposProcedimientos> lista = new List<TiposProcedimientos>();

        try
        {
            lista = TiposProcedimientosBLL.GetTiposProcedimientos();
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    private void Consultar(int numeroPagina)
    {
        int seleccion = Convert.ToInt32(eleccion);
        if (eleccion == "2")
            criterio = Convert.ToString(PacienteSelecionado.PacienteId);

        if (criterio.Trim().Length > 0)
        {
            switch (seleccion)
            {
                case 0: //id
                    {
                        int id = int.Parse(criterio);
                        listaProcedimientos = ProcedimientosBLL.GetList(p => p.ProcedimientoId == id);
                        ActualizarListaItems(numeroPagina);
                        break;

                    }
                case 1: //Paciente
                    {
                        int id = int.Parse(criterio);
                        listaProcedimientos = ProcedimientosBLL.GetList(p => p.PacienteId == id);
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 2: //Tipo de Procedimiento
                    {
                        int id = int.Parse(criterio);
                        listaProcedimientos = ProcedimientosBLL.GetList(p => p.TipoProcedimientoId == id);
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
            }

        }
        else
        {
            if( seleccion > 2)
            {
                switch (seleccion)
                {
                    case 3: //En Proceso
                        {
                            listaProcedimientos = ProcedimientosBLL.GetList(p => p.Estado.ToLower().Contains("en proceso"));
                            ActualizarListaItems(numeroPagina);
                            break;
                        }
                    case 4: //Concluidos
                        {
                            listaProcedimientos = ProcedimientosBLL.GetList(p => p.Estado.ToLower() == "concluido");
                            ActualizarListaItems(numeroPagina);
                            break;
                        }
                    case 5: //Cobrados
                        {
                            listaProcedimientos = ProcedimientosBLL.GetList(p => p.EsCobrado == true);
                            ActualizarListaItems(numeroPagina);
                            break;
                        }
                    case 6: //No Cobrados
                        {
                            listaProcedimientos = ProcedimientosBLL.GetList(p => p.EsCobrado == false);
                            ActualizarListaItems(numeroPagina);
                            break;
                        }
                }
            }
            else
            {
                listaProcedimientos = ProcedimientosBLL.GetList(x => true);
                ActualizarListaItems(numeroPagina);
            }



        }
    }

    public string Paciente(int id)
    {
        var paciente = PacientesBLL.Buscar(id);
        if (paciente != null)
            return (paciente.Nombres +" "+ paciente.Apellidos) ;
        else
            return "Paciente eliminado";

    }

    public TiposProcedimientos BuscarTipoProcedimiento(int id)
    {
        return TiposProcedimientosBLL.Buscar(id);
    }

    public void ObtenerTotalSinCobrar(List<Procedimientos> lista)
    {
        TotalSinCobrar = 0;
        foreach (var item in lista)
        {
            if (item.EsCobrado == false)
                TotalSinCobrar += item.Monto;
        }
    }

    public void GenerarReporte()
    {

        if (listaProcedimientos.Count > 0)
        {
            var parameters = new ModalParameters();
            parameters.Add("Lista", listaProcedimientos);

            modal.Show<VerProcedimientosReport>("Reporte de Procedimientos", parameters);
        }
        else
        {
            toast.ShowWarning("No hay datos para imprimir");
        }
    }
}