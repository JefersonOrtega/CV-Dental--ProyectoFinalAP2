@page "/ConsultaPacientes"

@using CVDentalSteticSystem.BLL
@using CVDentalSteticSystem.Pages.ReportesComponents
@using CVDentalSteticSystem.Pages.Reportes

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService modal
@inject IToastService toast

<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!EsAutorizado)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& EsAutorizado)
{
<div class="card">
    <div class="card-header">
        <h3>Consulta de Pacientes</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="form-group col-4">
                <label>Filtro: </label>
                <select @bind="eleccion" class="form-control  col-4" placeholder="Seleccione un Filtro">
                    <option value="0">Todo</option>
                    <option value="1">Id</option>
                    <option value="2">Nombres</option>
                    <option value="3">Apellidos</option>
                    <option value="4">Dirección</option>
                    <option value="5">Balance</option>
                </select>
            </div>

            <div class="form-group   col-6">
                <label>Criterio</label>
                <div class="input-group">
                    <input type="text" @bind=" criterio" class="form-control" />
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="@(c => Consultar(0))">Consultar</button>
                    </div>
                </div>
            </div>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Paciente Id</th>
                    <th>Nombres</th>
                    <th>Apellidos</th>
                    <th>Dirección</th>
                    <th>Teléfono</th>
                    <th>Genero</th>
                    <th>Edad</th>
                    <th>FechaRegistro</th>
                    <th>Seguro Médico</th>
                    <th>Balance</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in listaItems)
                {
                    <tr>
                        <td>@item.PacienteId</td>
                        <td>@item.Nombres</td>
                        <td>@item.Apellidos</td>
                        <td>@item.Direccion</td>
                        <td>@item.Telefono</td>
                        <td>@item.Genero</td>
                        <td>@((((DateTime.Now - @item.FechaNacimiento).TotalDays) / 365).ToString("N1"))</td>
                        <td>@item.FechaRegistro</td>
                        <td>@SegurosBLL.Buscar(@item.SeguroId).Nombre</td>
                       
                        <td>@item.Balance</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
    <div class="card-footer">
        <div class="form-group">

            <label>Total Balances</label>
            <input type="text" readonly @bind="TotalBalances" class="form-control col-4" />
        </div>
        <div class="form-group text-center" display: in line-block>
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">

                    <li class="page-item">
                        <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Primero"))" tabindex="-1"> @("<<") </button>
                    </li>
                    <li class="page-item">
                        <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Anterior"))" tabindex="-1"> @("<") </button>
                    </li>


                    @for (int i = 0; i < TotalPaginas; i++)
                    {
                        var numeroPagina = i;
                        <li class="page-item">
                            <button class="@(PaginaActual == numeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                    @onclick="@(c => Consultar(numeroPagina))">
                                @(i + 1)
                            </button>
                        </li>
                    }

                    <li class="page-item">
                        <button type="button" class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Siguiente"))" tabindex="-1">@(">")</button>

                    </li>
                    <li class="page-item">
                        <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Ultimo"))" tabindex="-1"> @(">>") </button>
                    </li>

                </ul>
            </nav>
        </div>
    </div>


    <div class="card-footer">
        <button type="button" class="btn btn-lg btn-warning" @onclick="GenerarReporte"> <i class="oi oi-print" aria-hidden="true" /> Imprimir</button>
    </div>
</div>
}

@code {

    List<Pacientes> lista = new List<Pacientes>();
    List<Pacientes> listaItems = new List<Pacientes>();

    private string eleccion;
    private string criterio = "";
    decimal TotalBalances = 0;
    public bool EsAutorizado = false;

    public int PageSize { get; set; }
    public int TotalPaginas { get; set; }
    public int PaginaActual { get; set; }


    protected override void OnInitialized()
    {
        lista = PacientesBLL.GetList(x => true);
        ObtenerBalances(lista);
        PageSize = 5;

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador") ||
        AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Normal"))
        {
            EsAutorizado = true;
        }

        TotalPaginas = (int)Math.Ceiling(lista.Count() / (decimal)PageSize);
        listaItems = lista.Take(PageSize).ToList();


    }

    private void ActualizarListaItems(int numeroPagina)
    {
        listaItems = lista.Skip(numeroPagina * PageSize).Take(PageSize).ToList();
        TotalPaginas = (int)Math.Ceiling(lista.Count() / (decimal)PageSize);
        PaginaActual = numeroPagina;
        ObtenerBalances(lista);
    }

    private void NavegateTo(string direccion)
    {
        if (direccion == "Anterior" && PaginaActual != 0)
            PaginaActual -= 1;
        if (direccion == "Siguiente" && PaginaActual != TotalPaginas)
            PaginaActual += 1;

        if (direccion == "Primero" && PaginaActual != 0)
            PaginaActual = 0;
        if (direccion == "Ultimo" && PaginaActual != TotalPaginas)
            PaginaActual = TotalPaginas - 1;

        ActualizarListaItems(PaginaActual);
    }



    private void Consultar(int numeroPagina)
    {
        int seleccion = Convert.ToInt32(eleccion);

        if (criterio.Trim().Length > 0)
        {
            switch (seleccion)
            {
                case 0:
                    {
                        lista = PacientesBLL.GetList(x => true);
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 1: //id
                    {
                        int id = int.Parse(criterio);
                        lista = PacientesBLL.GetList(p => p.PacienteId == id);
                        ActualizarListaItems(numeroPagina);
                        break;

                    }
                case 2: //Nombres
                    {
                        lista = PacientesBLL.GetList(p => p.Nombres.ToLower().Contains(criterio.ToLower()));
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 3: //Apellidos
                    {
                        lista = PacientesBLL.GetList(p => p.Apellidos.ToLower().Contains(criterio.ToLower()));
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 4: //Direccion
                    {
                        lista = PacientesBLL.GetList(p => p.Direccion.ToLower() == criterio.ToLower());
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 5: //Balance
                    {
                        decimal balance = Convert.ToDecimal(criterio);
                        lista = PacientesBLL.GetList(p => p.Balance == balance);
                        ActualizarListaItems(numeroPagina);
                        break;
                    }

            }
        }
        else
        {
            lista = PacientesBLL.GetList(x => true);
            ActualizarListaItems(numeroPagina);
        }
    }

    public void ObtenerBalances(List<Pacientes> listaProductos)
    {
        TotalBalances = 0;
        foreach (var item in listaProductos)
        {
            TotalBalances += item.Balance;
        }
    }

    public void GenerarReporte()
    {

        if (lista.Count > 0)
        {
            var parameters = new ModalParameters();
            parameters.Add("Lista", lista);

            modal.Show<VerPacientesReport>("Reporte de pacientes", parameters);
        }
        else
        {
            toast.ShowWarning("No hay datos para imprimir");
        }
    }

}