@page "/ConsultaUsuarios"

@using CVDentalSteticSystem.BLL


@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!EsAutorizado)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& EsAutorizado)
{
    <div class="card">
        <div class="card-header">
            <h3>Consulta de Usuarios</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="form-group col-4">
                    <label>Filtro: </label>
                    <select @bind="eleccion" class="form-control  col-4" placeholder="Seleccione un Filtro">
                        <option value="0">Id</option>
                        <option value="1">Nombres</option>
                        <option value="2">Nombre de Usuario</option>
                        <option value="3">Nivel de Acceso</option>
                    </select>
                </div>

                <div class="form-group   col-6">
                    <label>Criterio</label>
                    <div class="input-group">
                        <input type="text" @bind=" criterio" class="form-control" />
                        <div class="input-group-append">
                            <button class="btn btn-primary" @onclick="@(c => Consultar(0))">Consultar</button>
                        </div>
                    </div>
                </div>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Usuario Id</th>
                        <th>Nombres</th>
                        <th>Nombre de Usuario</th>
                        <th>Nivel de Acceso</th>
                        <th>Fecha de Registro</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in listaItems)
                    {
                        <tr>
                            <td>@item.UsuarioId</td>
                            <td>@item.Nombres</td>
                            <td>@item.Usuario</td>
                            <td>@item.NivelAcceso</td>
                            <td>@item.Fecha</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer">
             <div class="form-group text-center" display: inline-block>
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">

                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Primero"))" tabindex="-1"> @("<<") </button>
                        </li>
                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Anterior"))" tabindex="-1"> @("<") </button>
                        </li>


                        @for (int i = 0; i < TotalPaginas; i++)
                        {
                            var numeroPagina = i;
                            <li class="page-item">
                                <button class="@(PaginaActual == numeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                        @onclick="@(c => Consultar(numeroPagina))">
                                    @(i + 1)
                                </button>
                            </li>
                        }

                        <li class="page-item">
                            <button type="button" class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Siguiente"))" tabindex="-1">@(">")</button>

                        </li>
                        <li class="page-item">
                            <button class="page-link btn btn-danger" @onclick="@(e => NavegateTo("Ultimo"))" tabindex="-1"> @(">>") </button>
                        </li>
                        
                    </ul>
                </nav>
            </div>
        </div>

    </div>
}

@code {
    List<Usuarios> lista = new List<Usuarios>();
    List<Usuarios> listaItems = new List<Usuarios>();
    private string eleccion;
    private string criterio;
    public bool EsAutorizado = false;

    public int PageSize { get; set; }
    public int TotalPaginas { get; set; }
    public int PaginaActual { get; set; }


    protected override void OnInitialized()
    {
        lista = UsuariosBLL.GetList(x => true);
        PageSize = 5;
        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
        {
            EsAutorizado = true;
        }

        TotalPaginas = (int)Math.Ceiling(lista.Count() / (decimal)PageSize);
        listaItems = lista.Take(PageSize).ToList();

    }


    private void ActualizarListaItems(int numeroPagina)
    {
        listaItems = lista.Skip(numeroPagina * PageSize).Take(PageSize).ToList();
        TotalPaginas = (int)Math.Ceiling(lista.Count() / (decimal)PageSize);
        PaginaActual = numeroPagina;

    }

    private void NavegateTo(string direccion)
    {
        if (direccion == "Anterior" && PaginaActual != 0)
            PaginaActual -= 1;
        if (direccion == "Siguiente" && PaginaActual != TotalPaginas)
            PaginaActual += 1;

        if (direccion == "Primero" && PaginaActual != 0)
            PaginaActual = 0;
        if (direccion == "Ultimo" && PaginaActual != TotalPaginas)
            PaginaActual = TotalPaginas - 1;

        ActualizarListaItems(PaginaActual);
    }


    private void Consultar(int numeroPagina)
    {
        int seleccion = Convert.ToInt32(eleccion);

        if (criterio.Trim().Length > 0)
        {
            switch (seleccion)
            {
                case 0: //id
                    {
                        int id = int.Parse(criterio);
                        lista = UsuariosBLL.GetList(p => p.UsuarioId == id);
                        ActualizarListaItems(numeroPagina);
                        break;

                    }
                case 1: //Nombres
                    {
                        lista = UsuariosBLL.GetList(p => p.Nombres.ToLower().Contains(criterio.ToLower()));
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 2: //Nombre de Usuario
                    {
                        lista = UsuariosBLL.GetList(p => p.Usuario == criterio);
                        ActualizarListaItems(numeroPagina);
                        break;
                    }
                case 3: //Nivel de Acceso
                    {
                        lista = UsuariosBLL.GetList(p => p.NivelAcceso.ToLower() == criterio.ToLower());
                        ActualizarListaItems(numeroPagina);
                        break;
                    }

            }
        }
        else
        {
            lista = UsuariosBLL.GetList(x => true);

        }
    }

}