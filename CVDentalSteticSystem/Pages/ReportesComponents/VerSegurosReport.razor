@page "/ReporteSeguros"

@using Reportes
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!EsAutorizado)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
  && EsAutorizado)
  {
    @if (Data is { })
    {
        <object data="@pdfContent" width="1500" height="600" name="_blank"></object>
    }
  }

@code {
    [Parameter]
    public List<Seguros> lista { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    byte[] Data;
    string pdfContent = "";

    public bool EsAutorizado = false;

    protected override void OnInitialized()
    {
        VerReporte();

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador") ||
            AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Normal"))
        {
            EsAutorizado = true;
        }
    }

    public void VerReporte()
    {
        SegurosReport seguros = new SegurosReport();

        Data = seguros.Reporte(lista);

        pdfContent = "data:application/pdf;base64,";
        pdfContent += System.Convert.ToBase64String(Data);

    }
}